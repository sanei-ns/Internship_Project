#!/usr/bin/env bash
#
# The protStat script can be used to sort the '_protocols.txt'} file (generated
# by the protoStats plugin) or the '_nDPI.txt' file (generated by the nDPI
# plugin) for the most or least occurring protocols (in terms of number of
# packets or bytes). It can output the top or bottom N protocols or only those
# with at least a given percentage:

source "$(dirname "$0")/t2utils.sh"

usage() {
    printf "Usage:\n"
    printf "    $SNAME [OPTION...] file_protocols.txt\n"
    printf "    $SNAME [OPTION...] file_nDPI.txt\n"
    printf "\n"
    printf "Optional arguments:\n"
    printf "    -b              sort and filter according to bytes instead of packets\n"
    printf "\n"
    printf "    -B              do not output bytes counts\n"
    printf "    -P              do not output packets counts (automatically sort by bytes)\n"
    printf "\n"
    printf "    -p P            only output rows with probability >=P%% (P>0) or <=P%% (P<0)\n"
    printf "    -n N            only output top (N>0) or bottom (N<0) N ports/protocols\n"
    printf "\n"
    printf "    -l2             only output statistics for L2/3 protocols\n"
    printf "    -l4             only output statistics for L4 protocols\n"
    printf "    -tcp            only output statistics for TCP\n"
    printf "    -udp            only output statistics for UDP\n"
    printf "    -udplite        only output statistics for UDP-Lite\n"
    printf "    -sctp           only output statistics for SCTP\n"
    printf "\n"
    printf "    -h, --help      display this help, then exit\n"
}

# Default values
TOPFUNC=head
L2=0
L4=0
PROTO=()
P0=0
PN=100

while [ $# -gt 0 ]; do
    case "$1" in
        -b|--bytes)
            BYTES=1
            ;;

        -B|--no-bytes)
            NOBYTES=1
            ;;
        -P|--no-packets)
            BYTES=1
            NOPKTS=1
            ;;

        # -p=-P, -p=P, -pP -p-P, -p P, -p -P
        -p=-*)
            P0=0
            PN="${1#*=-}"
            validate_next_float "-p" "-$PN"
            ;;
        -p-*)
            P0=0
            PN="${1#*p-}"
            validate_next_float "-p" "-$PN"
            ;;
        -p=*)
            P0="${1#*=}"
            PN=100
            validate_next_float "-p" "$P0"
            ;;
        -p)
            validate_next_float "$1" "$2"
            if [ $2 -ge 0 ]; then
                P0="$2"
                PN=100
            else
                P0=0
                PN="$((-$2))"
            fi
            shift
            ;;
        -p*)
            P0="${1#*p}"
            PN=100
            validate_next_float "-p" "$P0"
            ;;

        # -n=-N, -n=N, -nN, -n-N, -n N, -n -N
        -n=-*)
            N="${1#*=-}"
            TOPFUNC=tail
            validate_next_int "-n" "-$N"
            ;;
        -n-*)
            N="${1#*n-}"
            TOPFUNC=tail
            validate_next_int "-n" "-$N"
            ;;
        -n=*)
            N="${1#*=}"
            validate_next_int "-n" "$N"
            ;;
        -n)
            validate_next_int "$1" "$2"
            if [ $2 -ge 0 ]; then
                N="$2"
            else
                N="$((-$2))"
                TOPFUNC=tail
            fi
            shift
            ;;
        -n*)
            N="${1#*n}"
            validate_next_int "-n" "$N"
            ;;

        -*l2) L2=1;;
        -*l4) L4=1;;

        -*tcp    ) PROTO+=(TCP);;
        -*udp    ) PROTO+=(UDP);;
        -*udplite) PROTO+=(UDP-Lite);;
        -*sctp   ) PROTO+=(SCTP);;

        -h|-\?|--help)
            usage
            exit 0
            ;;
        *)
            if [ ! -f "$1" ]; then
                abort_option_unknown "$1"
            fi
            FILE="$1"
            ;;
    esac
    shift
done

if [ ! -f "$FILE" ]; then
    abort_required_file
fi

if [ -n "$BYTES" ] && [ -n "$NOBYTES" ]; then
    printerr "Cannot sort by bytes without outputing bytes count"
    printinf "Remove one or both of '-b' and '-B' options"
    exit 1
fi

if [ -n "$NOPKTS" ] && [ -n "$NOBYTES" ]; then
    printerr "Cannot exclude both bytes and packets counts"
    printinf "Remove one or both of '-B' and '-P' options"
    exit 1
fi

# if no section
if [ $L2 -eq 0 ] && [ $L4 -eq 0 ] && [ ${#PROTO[@]} -eq 0 ]; then
    L2=1
    L4=1
    PROTO=(TCP UDP UDP-Lite SCTP)
fi

# Number of rows
[ -z "$N" ] && N=$(wc -l "$FILE" | $AWK '{print $1}')

# Common Headers
PRI_CHDR="${BOLD}%s\t"
if [ -z "$NOPKTS" ]; then
    PRI_CHDR="${PRI_CHDR}%20s\t"
    CHDR+=("Packets")
fi
if [ -z "$NOBYTES" ]; then
    PRI_CHDR="${PRI_CHDR}%20s\t"
    CHDR+=("Bytes")
fi
PRI_CHDR="${PRI_CHDR}%s${NOCOLOR}\n"
CHDR+=("Description")

# Column to use for sorting and comparing probabilities
if [ -n "$BYTES" ]; then
    if [ -z "$NOPKTS" ]; then
        SCOL=3
    else
        SCOL=2
    fi
    PCOL="bytes"
else
    SCOL=2
fi

if [ $L2 -eq 1 ] && [ -n "$(grep -F "# L2/3 Protocol" "$FILE")" ]; then
    printf "$PRI_CHDR" "L2/3 Protocol" "${CHDR[@]}"
    $AWK -F"\t" -v P0="$P0" -v PN="$PN" -v pcol="$PCOL" -v nopkts="$NOPKTS" -v nobytes="$NOBYTES" '
        $1 ~ /^0x/ {
            match($2, /^\s*([0-9]+) \[\s*(.*)%\]$/, pkts)
            match($3, /^\s*([0-9]+) \[\s*(.*)%\]$/, bytes)
            p = (pcol == "bytes") ? bytes[2] : pkts[2]
            if (P0 <= p && p <= PN) {
                printf "%s\t", $1
                if (!nopkts) printf "%s\t", $2
                if (!nobytes) printf "%s\t", $3
                print $4
            }
            next
        }
        $0 ~ /^# L4/ { exit }
    ' "$FILE" | sort -t$'\t' -nrk$SCOL | $TOPFUNC -"$N"
    echo
fi

if [ $L4 -eq 1 ]; then
    if [ -n "$(grep -F "# Protocol ID" "$FILE")" ]; then
        # Statistics file from nDPI: FILE_nDPI.txt
        HDR="Protocol ID"
    else
        # Statistics file from protoStats: FILE_protocols.txt
        HDR="L4 Protocol"
    fi
    printf "$PRI_CHDR" "$HDR" "${CHDR[@]}"
    $AWK -F"\t" -v P0="$P0" -v PN="$PN" -v pcol="$PCOL" -v pop="$POP" -v nopkts="$NOPKTS" -v nobytes="$NOBYTES" '
        $1 ~ /^0x/ { next }
        $1 ~ /^\s*[0-9]+/ {
            match($2, /^\s*([0-9]+) \[\s*(.*)%\]$/, pkts)
            match($3, /^\s*([0-9]+) \[\s*(.*)%\]$/, bytes)
            p = (pcol == "bytes") ? bytes[2] : pkts[2]
            if (P0 <= p && p <= PN) {
                printf "%s\t", $1
                if (!nopkts) printf "%s\t", $2
                if (!nobytes) printf "%s\t", $3
                print $4
            }
            next
        }
        $0 ~ /^# Total TCP/ { exit }
    ' "$FILE" | sort -t$'\t' -nrk$SCOL | $TOPFUNC -"$N"
    echo
fi

for ((i = 0; i < ${#PROTO[@]}; i++)); do
    if [ "$(grep -F "# Total ${PROTO[i]}" "$FILE")" ]; then
        printf "$PRI_CHDR" "${PROTO[i]} Port" "${CHDR[@]}"
        $AWK -F"\t" -v protoname="${PROTO[i]}" -v P0="$P0" -v PN="$PN" -v pcol="$PCOL" -v nopkts="$NOPKTS" -v nobytes="$NOBYTES" '{
            if (A == 0) {
                if ($0 ~ "# " protoname " Port") A = 1
                next
            }
            if ($1 ~ /^\s*[0-9]+$/) {
                match($2, /^\s*([0-9]+) \[\s*(.*)%\]$/, pkts)
                match($3, /^\s*([0-9]+) \[\s*(.*)%\]$/, bytes)
                p = (pcol == "bytes") ? bytes[2] : pkts[2]
                if (P0 <= p && p <= PN) {
                    printf "%s\t", $1
                    if (!nopkts) printf "%s\t", $2
                    if (!nobytes) printf "%s\t", $3
                    print $4
                }
                next
            } else if ($0 ~ /^\s*$/) {
                exit
            }
        }' "$FILE" | sort -t$'\t' -nrk$SCOL | $TOPFUNC -"$N"
        echo
    fi
done
